// Quiz 1 ~ 4. 다음 코의 콘솔창 출력결과는?

// (문제1)

함수();
function 함수() {
  console.log(안녕);
  let 안녕 = 'Hello!';
} 
// error 
// let 변수는 특이하게도 Hoisting이 되긴 하지만 undefined라는 값이 할당되지 않는다.
// 그래서 출력시 에러가 출력

// let 변수는 hoisting 되지만 var 변수처럼 자동으로 undefined 라는 값을 할당(일명 initalization) 해주지 않는다.
// 선언과 할당 사이에 시간차가 있기 때문에 그런 현상이 일어나는 것이고 let 변수는 그래서 쓸 수 없다.
// let, const 변수는 그래서 엄격하게 쓸 수 있는 변수라고 외우면 된다.

// (문제2)

함수();
var 함수 = function() {
  console.log(안녕);
  var 안녕 = 'Hello!';
} 

// error
// 정확히 말하면 함수가 아닙니다. 라는 에러이다.
// 지금 둘째줄에 있는 함수 선언부분을 보면 function 키워드 대신 변수만드는 것 처럼 함수를 선언과 할당하고 있다.
// 역시 이렇게 함수를 만들어도 Hoisting이 되는데, 근데 Hoisting은 변수의 선언부분만 된다
// 그래서 변수 선언부분만 맨 위로 끌어올려지는데
// 그 변수에다가 소괄호를 붙여봤자 아직 함수가 아니기 때문에 실행되지 않는다.
// (에러가 발생, 함수가 아닌 변수에다가 소괄호 붙이면 함수 아니라고 에러가 발생하는 것이다.)

// 문제(3)

let a = 1;
var 함수 = function() {
  a = 2;
}
console.log(a);

// a는 1이 출력된다.
// a는 1이라는 변수를 만들고
// 그 다음에 함수를 만들고 함수 안에서 a = 2라고 값을 변경시겼는데
// 함수를 정의만 했지 실행을 안시켜서 a = 2라는 부분은 없는 코드나 마찬가지이다.
// 그래서 a는 그냥 1이다.

// 문제(4)

let a = 1;
var b = 2;
window.a = 3;
window.b = 4;

console.log(a + b);

// a는 1, b는 4가 출력된다.

// b가 4가 되는 이유는 var b = 2 이것과 window.b = 5 이건 거의 동일한 기능을 하는 코드기 때문에
// b는 그냥 4로 재할당 되었다고 보면된다.

// a는 let 변수로 1을 할당하고 글로벌 변수로 3을 할당했다.
// 이 경우 우리가 a를 사용했을 때 조금 더 범위가 작고 가까운 1을 참조해서 사용한다.

// Quiz 5. 콘솔창에 1초에 한번씩 1부터 5까지의 정수를 출력해주고 싶다.

// for (var i = 0; i < 5; i++) { 
//   setTimeout(function() { console.log(i); }, i*1000 ); 
// }

// 반복문으로 축약하자마자 제대로 작동하지 않는다.
// 계속 5라는 숫자가 1초마다 출력된다.

// 위 코드는 왜 의도대로 동작하지 않을까?

// 자바스크립트는 일단 반복문을 만나면 반복문 내의 코드를 반복해서 실행한다.
// 지금 반복문 i가 0부터 5가 되기 전가지 반복해주세요~라고 써놓았으니 총 5번 반복이 된다.
// 근데 내부 코드는 setTimeout이다. X초후에 콜백함수 내의 console.log(i)를 실행해주세요~라는 코드이다.
// 그래서 그 부분은 반복문과 동시에 실행되지 않는다. 

// 반복문을 해석한 후.. 1초가 지나면 setTimeout 내의 console.log(i)가 발동된다.
// 근데 i를 채워넣고싶어서 봤더니 i값은 5밖에 없는 것이다.
// 왜냐하면 아까 반복문이 5번 실행되면서 i값은 0,1,2,3, ... 이렇게 차례로 변하다가 i값이 5가 되어 종료했다.
// 그리고 i 값은 var로 만든 전역변수이다.
// 그래서 i 값을 쓰려고 봤더니 전역변수 i = 5밖에 없어서 5를 집어넣어서 계속 실행해서 콘솔창에 5가 계속 출력되던 것이다.

// 해결책은 for 반복문에서 i변수를 만들 때 var 대신 let으로 바꾸는 것이다.
// let 변수는 범위가 중괄호다. for반복문도 중괄호에 해당된다.
// 그럼 이제 1초 후 console.log(i)가 실행될 때 i값을 채우려고 살펴보면
// i값이 for 반복문 내에 남아있기 때문에 그걸 가져다 쓰게 된다.
// 그래서 아까처럼 계속 5를 출력해주는게 아니라 1,2,3,4,5를 출력해준다.